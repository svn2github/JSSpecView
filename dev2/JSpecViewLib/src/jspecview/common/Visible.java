/* Copyright (c) 2008-2009 The University of the West Indies
 *
 * Contact: robert.lancashire@uwimona.edu.jm
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General private
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General private License for more details.
 *
 *  You should have received a copy of the GNU Lesser General private
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 */

// CHANGES to 'visible.java' - module to predict colour of visible spectrum
// created July 2008 based on concept published by Darren L. Williams
// in J. Chem. Educ., 84(11), 1873-1877, 2007
//
// Judd-Vos-modified 1931 CIE 2-deg color matching functions (1978)
// The CIE standard observer functions were curve fitted using FitYK
// and the equations used for these calculations. The values obtained
// do not seem to vary appreciably from those published in the JChemEd article

package jspecview.common;

import java.lang.Math;

import javajs.util.CU;

import jspecview.api.VisibleInterface;

/**
 * Visible class - for prediction of colour from visible spectrum
 * 
 * see 
 * 
 * Robert J. Lancashire and Craig A.D. Walters
 * Colour prediction with JSpecView
 * http://www.chemmantis.com/Article.aspx?id=850
 * 
 * 
 * and
 * 
 * Darren L. Williams, Thomas J. Flaherty, Casie L. Jupe, 
 * Stephanie A. Coleman, Kara A. Marquez, and Jamie J. Stanton
 * Beyond [lambda]max: Transforming Visible Spectra into 24-Bit Color Values
 * J. Chem. Educ., 2007, 84 (11), p 1873 DOI: 10.1021/ed084p1873
 * http://pubs.acs.org/doi/abs/10.1021/ed084p1873
 * 
 * and
 * 
 * Michael Stokes (Hewlett-Packard), Matthew Anderson (Microsoft),
 * Srinivasan Chandrasekar (Microsoft), Ricardo Motta (Hewlett-Packard)
 * A Standard Default Color Space for the Internet: sRGB
 * Version 1.10, November 5, 1996 
 * http://www.color.org/sRGB.xalter
 * 
 * @author Craig Walters
 * @author Prof Robert J. Lancashire
 */

public class Visible implements VisibleInterface {

	public Visible() {
		// for reflection
	}

	/**
	 * Returns the integer color of a solution based on its visible spectrum.
	 * 
	 * @param spec
	 * @param useFitted
	 *          if true, use approximate CIE curves and every point; if false, use
	 *          exact CIE 5-nm data and interpolated values
	 * @return 0xFFRRGGBB
	 * 
	 */
	@Override
	public int getColour(Spectrum spec, boolean useFitted) {
		Coordinate xyCoords[] = spec.getXYCoords();
		boolean isAbsorbance = spec.isAbsorbance();
		double[] xyzd = new double[4];

		// the spectrum has been checked to ensure that
		// (a) it has a nm axis
		// (b) it can be switched between absorbance and transmittance
		// (c) it is continuous
		// (d) it has more than 30 values
		// (e) it has a range at least 400 - 700 nm
		
		// Step 1. Determine the CIE tristimulus values

		if (useFitted) {
			getXYZfitted(xyCoords, isAbsorbance, xyzd);
		} else {
			getXYZinterpolated(xyCoords, isAbsorbance, xyzd);
		}
		xyzd[0] /= xyzd[3];
		xyzd[1] /= xyzd[3];
		xyzd[2] /= xyzd[3];
		System.out.println(xyzd[0] + " " + xyzd[1] + " " + xyzd[2]);

		// Step 2. Transform XYZ to ICC standard RGB values.

		double rgb[] = new double[] { 
				xyzd[0] *  3.2410 + xyzd[1] * -1.5374 + xyzd[2] * -0.4986,
				xyzd[0] * -0.9692 + xyzd[1] *  1.8760 + xyzd[2] *  0.0416,
				xyzd[0] *  0.0556 + xyzd[1] * -0.2040 + xyzd[2] *  1.0570 };
		System.out.println(rgb[0] + " " + rgb[1] + " " + rgb[2]);

		// Step 3. For CRT monitors, add gamma correction to the sRGB values.
		
		double gamma = 2.4;
		for (int i = 0; i < 3; i++)
			rgb[i] = (rgb[i] > 0.00304 ? 1.055 * Math.pow(rgb[i], 1 / gamma) - 0.055
							: 12.92 * rgb[i]);
		System.out.println(rgb[0] + " " + rgb[1] + " " + rgb[2]);

		// Step 4. Convert gamma-corrected sRGB' to 8-bit (0-255) values.		
		// Step 5. Package as 0xFFRRGGBB
		
		int c = CU.rgb(fix(rgb[0]), fix(rgb[1]), fix(rgb[2]));
		System.out.println(CU.colorPtFromInt(c));
		return c;

	}

	private static int fix(double d) {
		return (d <= 0 ? 0 : d >= 1 ? 255 : (int) Math.round(255 * d));
	}

	private static void getXYZinterpolated(Coordinate[] xyCoords, boolean isAbsorbance, double[] xyzd) {
		// Williams method -- using 5-nm interpolations and actual CIE data
		for (int i = cie1931_D65.length / 5; --i >= 0;) {
			int pt = (i + 1) * 5;
			double cie = cie1931_D65[--pt];
			double zb = cie1931_D65[--pt] * cie;
			double yb = cie1931_D65[--pt] * cie;
			double xb = cie1931_D65[--pt] * cie;
			double x = cie1931_D65[--pt];
			double y = Coordinate.getYValueAt(xyCoords, x);
			if (isAbsorbance)
				y = Math.pow(10, -Math.max(y, 0));
			//y = 1;
			xyzd[0] += y * xb;
			xyzd[1] += y * yb;
			xyzd[2] += y * zb;
			xyzd[3] += yb;
		}
	}

	private static void getXYZfitted(Coordinate[] xyCoords, boolean isAbsorbance,
			double[] xyzd) {
		// Lancashire method -- using actual data and curve-fit CIE data

		// Approximate x-bar, y-bar, z-bar, and CIE D65 curves.
		// We treat the x-bar and CIE D65 curves in two parts
		// with the changeover at 499 nm, and z-bar in two
		// parts with changeover at 437 nm.

		for (int i = xyCoords.length; --i >= 0;) {
			double x = xyCoords[i].getXVal();
			if (x < 400 || x > 700)
				continue;
			
			double cie, xb, yb, zb;

			cie = (x < 499 ? gauss(115.195, 8.33988E-05, x - 472.727)
					: 208.375 - 0.195278 * x);

			xb = cie
					* (x < 499 ? gauss(0.335681, 0.000998224, x - 441.96) : 
						gauss(1.05583, 0.00044156, x - 596.124));
			yb = cie * gauss(1.01832, 0.00028466, x - 559.04);
			zb = cie * gauss(1.71// 1.63045// better: 1.71
					, (x < 437 ? 0.001586000 : 0.00043647), x - 437.406);

			System.out.println(cie + " " + gauss(85.7145, 2.05719, x - 607.263)
					+ gauss(57.7256, 0.000126451, x - 457.096));

/*			 

			cie = gauss(85.7145, 2.05719, x - 607.263)
					+ gauss(57.7256, 0.000126451, x - 457.096);
			xb = cie * gauss(1.06561, 0.000500819, x - 598.623)
					+ gauss(0.283831, 0.00292745, x - 435.734)
					+ gauss(0.113771, 0.00192849, x - 549.271)
					+ gauss(0.239103, 0.00255944, x - 460.547);

			yb = cie * gauss(0.239617, 0.00117296, x - 530.517)
					+ gauss(0.910377, 0.000300984, x - 565.635)
					+ gauss(0.0311013, 0.00152386, x - 463.833);

			zb = cie * gauss(0.988366, 0.00220336, x - 456.345)
					+ gauss(0.381551, 0.000848554, x - 450.871)
					+ gauss(0.355693, 0.000628546, x - 470.668)
					+ gauss(0.81862, 0.00471059, x - 433.144);

*/
			double y = xyCoords[i].getYVal();
			if (isAbsorbance)
				y = Math.pow(10, -Math.max(y, 0));
			// y = 1; // test for 255 255 255
			xyzd[0] += y * xb;
			xyzd[1] += y * yb;
			xyzd[2] += y * zb;
			xyzd[3] += yb;
		}
	}

	private static double gauss(double a, double b, double x) {
		return a * Math.exp(-b * x * x);
	}

	private static double[] cie1931_D65 = {
		// http://files.cie.co.at/204.xls
		//  x_      y_       z_      D65
		/*
		400,0.01431,0.000396,0.06785001,82.7549,
		401,0.01570443,0.0004337147,0.07448632,83.628,
		402,0.01714744,0.000473024,0.08136156,84.5011,
		403,0.01878122,0.000517876,0.08915364,85.3742,
		404,0.02074801,0.0005722187,0.09854048,86.2473,
		405,0.02319,0.00064,0.1102,87.1204,
		406,0.02620736,0.00072456,0.1246133,87.9936,
		407,0.02978248,0.0008255,0.1417017,88.8667,
		408,0.03388092,0.00094116,0.1613035,89.7398,
		409,0.03846824,0.00106988,0.1832568,90.6129,
		410,0.04351,0.00121,0.2074,91.486,
		411,0.0489956,0.001362091,0.2336921,91.6806,
		412,0.0550226,0.001530752,0.2626114,91.8752,
		413,0.0617188,0.001720368,0.2947746,92.0697,
		414,0.069212,0.001935323,0.3307985,92.2643,
		415,0.07763,0.00218,0.3713,92.4589,
		416,0.08695811,0.0024548,0.4162091,92.6535,
		417,0.09717672,0.002764,0.4654642,92.8481,
		418,0.1084063,0.0031178,0.5196948,93.0426,
		419,0.1207672,0.0035264,0.5795303,93.2372,
		420,0.13438,0.004,0.6456,93.4318,
		421,0.1493582,0.00454624,0.7184838,92.7568,
		422,0.1653957,0.00515932,0.7967133,92.0819,
		423,0.1819831,0.00582928,0.8778459,91.4069,
		424,0.198611,0.00654616,0.959439,90.732,
		425,0.21477,0.0073,1.0390501,90.057,
		426,0.2301868,0.008086507,1.1153673,89.3821,
		427,0.2448797,0.00890872,1.1884971,88.7071,
		428,0.2587773,0.00976768,1.2581233,88.0322,
		429,0.2718079,0.01066443,1.3239296,87.3572,
		430,0.2839,0.0116,1.3856,86.6823,
		431,0.2949438,0.01257317,1.4426352,88.5006,
		432,0.3048965,0.01358272,1.4948035,90.3188,
		433,0.3137873,0.01462968,1.5421903,92.1371,
		434,0.3216454,0.01571509,1.5848807,93.9554,
		435,0.3285,0.01684,1.62296,95.7736,
		436,0.3343513,0.01800736,1.6564048,97.5919,
		437,0.3392101,0.01921448,1.6852959,99.4102,
		438,0.3431213,0.02045392,1.7098745,101.228,
		439,0.3461296,0.02171824,1.7303821,103.047,
		440,0.34828,0.023,1.74706,104.865,
		441,0.3495999,0.02429461,1.7600446,106.079,
		442,0.3501474,0.02561024,1.7696233,107.294,
		443,0.350013,0.02695857,1.7762637,108.508,
		444,0.349287,0.02835125,1.7804334,109.722,
		445,0.34806,0.0298,1.7826,110.936,
		446,0.3463733,0.03131083,1.7829682,112.151,
		447,0.3442624,0.03288368,1.7816998,113.365,
		448,0.3418088,0.03452112,1.7791982,114.579,
		449,0.3390941,0.03622571,1.7758671,115.794,
		450,0.3362,0.038,1.77211,117.008,
		451,0.3331977,0.03984667,1.7682589,117.088,
		452,0.3300411,0.041768,1.764039,117.169,
		453,0.3266357,0.043766,1.7589438,117.249,
		454,0.3228868,0.04584267,1.7524663,117.33,
		455,0.3187,0.048,1.7441,117.41,
		456,0.3140251,0.05024368,1.7335595,117.49,
		457,0.308884,0.05257304,1.7208581,117.571,
		458,0.3032904,0.05498056,1.7059369,117.651,
		459,0.2972579,0.05745872,1.6887372,117.732,
		460,0.2908,0.06,1.6692,117.812,
		461,0.2839701,0.06260197,1.6475287,117.517,
		462,0.2767214,0.06527752,1.6234127,117.222,
		463,0.2689178,0.06804208,1.5960223,116.927,
		464,0.2604227,0.07091109,1.564528,116.632,
		465,0.2511,0.0739,1.5281,116.336,
		466,0.2408475,0.077016,1.4861114,116.041,
		467,0.2298512,0.0802664,1.4395215,115.746,
		468,0.2184072,0.0836668,1.3898799,115.451,
		469,0.2068115,0.0872328,1.3387362,115.156,
		470,0.19536,0.09098,1.28764,114.861,
		471,0.1842136,0.09491755,1.2374223,114.967,
		472,0.1733273,0.09904584,1.1878243,115.073,
		473,0.1626881,0.1033674,1.1387611,115.18,
		474,0.1522833,0.1078846,1.090148,115.286,
		475,0.1421,0.1126,1.0419,115.392,
		476,0.1321786,0.117532,0.9941976,115.498,
		477,0.1225696,0.1226744,0.9473473,115.604,
		478,0.1132752,0.1279928,0.9014531,115.711,
		479,0.1042979,0.1334528,0.8566193,115.817,
		480,0.09564,0.13902,0.8129501,115.923,
		481,0.08729955,0.1446764,0.7705173,115.212,
		482,0.07930804,0.1504693,0.7294448,114.501,
		483,0.07171776,0.1564619,0.6899136,113.789,
		484,0.06458099,0.1627177,0.6521049,113.078,
		485,0.05795001,0.1693,0.6162,112.367,
		486,0.05186211,0.1762431,0.5823286,111.656,
		487,0.04628152,0.1835581,0.5504162,110.945,
		488,0.04115088,0.1912735,0.5203376,110.233,
		489,0.03641283,0.199418,0.4919673,109.522,
		490,0.03201,0.20802,0.46518,108.811,
		491,0.0279172,0.2171199,0.4399246,108.865,
		492,0.0241444,0.2267345,0.4161836,108.92,
		493,0.020687,0.2368571,0.3938822,108.974,
		494,0.0175404,0.2474812,0.3729459,109.028,
		495,0.0147,0.2586,0.3533,109.082,
		496,0.01216179,0.2701849,0.3348578,109.137,
		497,0.00991996,0.2822939,0.3175521,109.191,
		498,0.00796724,0.2950505,0.3013375,109.245,
		499,0.006296346,0.308578,0.2861686,109.3,
		500,0.0049,0.323,0.272,109.354,
		501,0.003777173,0.3384021,0.2588171,109.199,
		502,0.00294532,0.3546858,0.2464838,109.044,
		503,0.00242488,0.3716986,0.2347718,108.888,
		504,0.002236293,0.3892875,0.2234533,108.733,
		505,0.0024,0.4073,0.2123,108.578,
		506,0.00292552,0.4256299,0.2011692,108.423,
		507,0.00383656,0.4443096,0.1901196,108.268,
		508,0.00517484,0.4633944,0.1792254,108.112,
		509,0.00698208,0.4829395,0.1685608,107.957,
		510,0.0093,0.503,0.1582,107.802,
		511,0.01214949,0.5235693,0.1481383,107.501,
		512,0.01553588,0.544512,0.1383758,107.2,
		513,0.01947752,0.56569,0.1289942,106.898,
		514,0.02399277,0.5869653,0.1200751,106.597,
		515,0.0291,0.6082,0.1117,106.296,
		516,0.03481485,0.6293456,0.1039048,105.995,
		517,0.04112016,0.6503068,0.09666748,105.694,
		518,0.04798504,0.6708752,0.08998272,105.392,
		519,0.05537861,0.6908424,0.08384531,105.091,
		520,0.06327,0.71,0.07824999,104.79,
		521,0.07163501,0.7281852,0.07320899,105.08,
		522,0.08046224,0.7454636,0.06867816,105.37,
		523,0.08973996,0.7619694,0.06456784,105.66,
		524,0.09945645,0.7778368,0.06078835,105.95,
		525,0.1096,0.7932,0.05725001,106.239,
		526,0.1201674,0.8081104,0.05390435,106.529,
		527,0.1311145,0.8224962,0.05074664,106.819,
		528,0.1423679,0.8363068,0.04775276,107.109,
		529,0.1538542,0.8494916,0.04489859,107.399,
		530,0.1655,0.862,0.04216,107.689,
		531,0.1772571,0.8738108,0.03950728,107.361,
		532,0.18914,0.8849624,0.03693564,107.032,
		533,0.2011694,0.8954936,0.03445836,106.704,
		534,0.2133658,0.9054432,0.03208872,106.375,
		535,0.2257499,0.9148501,0.02984,106.047,
		536,0.2383209,0.9237348,0.02771181,105.719,
		537,0.2510668,0.9320924,0.02569444,105.39,
		538,0.2639922,0.9399226,0.02378716,105.062,
		539,0.2771017,0.9472252,0.02198925,104.733,
		540,0.2904,0.954,0.0203,104.405,
		541,0.3038912,0.9602561,0.01871805,104.369,
		542,0.3175726,0.9660074,0.01724036,104.333,
		543,0.3314384,0.9712606,0.01586364,104.297,
		544,0.3454828,0.9760225,0.01458461,104.261,
		545,0.3597,0.9803,0.0134,104.225,
		546,0.3740839,0.9840924,0.01230723,104.19,
		547,0.3886396,0.9874182,0.01130188,104.154,
		548,0.4033784,0.9903128,0.01037792,104.118,
		549,0.4183115,0.9928116,0.009529306,104.082,
		550,0.4334499,0.9949501,0.008749999,104.046,
		551,0.4487953,0.9967108,0.0080352,103.641,
		552,0.464336,0.9980983,0.0073816,103.237,
		553,0.480064,0.999112,0.0067854,102.832,
		554,0.4959713,0.9997482,0.0062428,102.428,
		555,0.5120501,1,0.005749999,102.023,
		556,0.5282959,0.9998567,0.0053036,101.618,
		557,0.5446916,0.9993046,0.0048998,101.214,
		558,0.5612094,0.9983255,0.0045342,100.809,
		559,0.5778215,0.9968987,0.0042024,100.405,
		560,0.5945,0.995,0.0039,100,
		561,0.6112209,0.9926005,0.0036232,99.6334,
		562,0.6279758,0.9897426,0.0033706,99.2668,
		563,0.6447602,0.9864444,0.0031414,98.9003,
		564,0.6615697,0.9827241,0.0029348,98.5337,
		565,0.6784,0.9786,0.002749999,98.1671,
		566,0.6952392,0.9740837,0.0025852,97.8005,
		567,0.7120586,0.9691712,0.0024386,97.4339,
		568,0.7288284,0.9638568,0.0023094,97.0674,
		569,0.7455188,0.9581349,0.0021968,96.7008,
		570,0.7621,0.952,0.0021,96.3342,
		571,0.7785432,0.9454504,0.002017733,96.2796,
		572,0.7948256,0.9384992,0.0019482,96.225,
		573,0.8109264,0.9311628,0.0018898,96.1703,
		574,0.8268248,0.9234576,0.001840933,96.1157,
		575,0.8425,0.9154,0.0018,96.0611,
		576,0.8579325,0.9070064,0.001766267,96.0065,
		577,0.8730816,0.8982772,0.0017378,95.9519,
		578,0.8878944,0.8892048,0.0017112,95.8972,
		579,0.9023181,0.8797816,0.001683067,95.8426,
		580,0.9163,0.87,0.001650001,95.788,
		581,0.9297995,0.8598613,0.001610133,95.0778,
		582,0.9427984,0.849392,0.0015644,94.3675,
		583,0.9552776,0.838622,0.0015136,93.6573,
		584,0.9672179,0.8275813,0.001458533,92.947,
		585,0.9786,0.8163,0.0014,92.2368,
		586,0.9893856,0.8047947,0.001336667,91.5266,
		587,0.9995488,0.793082,0.00127,90.8163,
		588,1.0090892,0.781192,0.001205,90.1061,
		589,1.0180064,0.7691547,0.001146667,89.3958,
		590,1.0263,0.757,0.0011,88.6856,
		591,1.0339827,0.7447541,0.0010688,88.8177,
		592,1.040986,0.7324224,0.0010494,88.9497,
		593,1.047188,0.7200036,0.0010356,89.0818,
		594,1.0524667,0.7074965,0.0010212,89.2138,
		595,1.0567,0.6949,0.001,89.3459,
		596,1.0597944,0.6822192,0.00096864,89.478,
		597,1.0617992,0.6694716,0.00092992,89.61,
		598,1.0628068,0.6566744,0.00088688,89.7421,
		599,1.0629096,0.6438448,0.00084256,89.8741,
		600,1.0622,0.631,0.0008,90.0062,
		601,1.0607352,0.6181555,0.00076096,89.9655,
		602,1.0584436,0.6053144,0.00072368,89.9248,
		603,1.0552244,0.5924756,0.00068592,89.8841,
		604,1.0509768,0.5796379,0.00064544,89.8434,
		605,1.0456,0.5668,0.0006,89.8026,
		606,1.0390369,0.5539611,0.0005478667,89.7619,
		607,1.0313608,0.5411372,0.0004916,89.7212,
		608,1.0226662,0.5283528,0.0004354,89.6805,
		609,1.0130477,0.5156323,0.0003834667,89.6398,
		610,1.0026,0.503,0.00034,89.5991,
		611,0.9913675,0.4904688,0.0003072533,89.4091,
		612,0.9793314,0.4780304,0.00028316,89.219,
		613,0.9664916,0.4656776,0.00026544,89.029,
		614,0.9528479,0.4534032,0.0002518133,88.8389,
		615,0.9384,0.4412,0.00024,88.6489,
		616,0.923194,0.42908,0.0002295467,88.4589,
		617,0.907244,0.417036,0.00022064,88.2688,
		618,0.890502,0.405032,0.00021196,88.0788,
		619,0.87292,0.393032,0.0002021867,87.8887,
		620,0.8544499,0.381,0.00019,87.6987,
		621,0.835084,0.3689184,0.0001742133,87.2577,
		622,0.814946,0.3568272,0.00015564,86.8167,
		623,0.794186,0.3447768,0.00013596,86.3757,
		624,0.772954,0.3328176,0.0001168533,85.9347,
		625,0.7514,0.321,0.0001,85.4936,
		626,0.7295836,0.3093381,0.00008613333,85.0526,
		627,0.7075888,0.2978504,0.0000746,84.6116,
		628,0.6856022,0.2865936,0.000065,84.1706,
		629,0.6638104,0.2756245,0.00005693333,83.7296,
		630,0.6424,0.265,0.00004999999,83.2886,
		631,0.6215149,0.2547632,0.00004416,83.3297,
		632,0.6011138,0.2448896,0.00003948,83.3707,
		633,0.5811052,0.2353344,0.00003572,83.4118,
		634,0.5613977,0.2260528,0.00003264,83.4528,
		635,0.5419,0.217,0.00003,83.4939,
		636,0.5225995,0.2081616,0.00002765333,83.535,
		637,0.5035464,0.1995488,0.00002556,83.576,
		638,0.4847436,0.1911552,0.00002364,83.6171,
		639,0.4661939,0.1829744,0.00002181333,83.6581,
		640,0.4479,0.175,0.00002,83.6992,
		641,0.4298613,0.1672235,0.00001813333,83.332,
		642,0.412098,0.1596464,0.0000162,82.9647,
		643,0.394644,0.1522776,0.0000142,82.5975,
		644,0.3775333,0.1451259,0.00001213333,82.2302,
		645,0.3608,0.1382,0.00001,81.863,
		646,0.3444563,0.1315003,0.000007733333,81.4958,
		647,0.3285168,0.1250248,0.0000054,81.1285,
		648,0.3130192,0.1187792,0.0000032,80.7613,
		649,0.2980011,0.1127691,0.000001333333,80.394,
		650,0.2835,0.107,0,80.0268,
		651,0.2695448,0.1014762,0,80.0456,
		652,0.2561184,0.09618864,0,80.0644,
		653,0.2431896,0.09112296,0,80.0831,
		654,0.2307272,0.08626485,0,80.1019,
		655,0.2187,0.0816,0,80.1207,
		656,0.2070971,0.07712064,0,80.1395,
		657,0.1959232,0.07282552,0,80.1583,
		658,0.1851708,0.06871008,0,80.177,
		659,0.1748323,0.06476976,0,80.1958,
		660,0.1649,0.061,0,80.2146,
		661,0.1553667,0.05739621,0,80.4209,
		662,0.14623,0.05395504,0,80.6272,
		663,0.13749,0.05067376,0,80.8336,
		664,0.1291467,0.04754965,0,81.0399,
		665,0.1212,0.04458,0,81.2462,
		666,0.1136397,0.04175872,0,81.4525,
		667,0.106465,0.03908496,0,81.6588,
		668,0.09969044,0.03656384,0,81.8652,
		669,0.09333061,0.03420048,0,82.0715,
		670,0.0874,0.032,0,82.2778,
		671,0.08190096,0.02996261,0,81.8784,
		672,0.07680428,0.02807664,0,81.4791,
		673,0.07207712,0.02632936,0,81.0797,
		674,0.06768664,0.02470805,0,80.6804,
		675,0.0636,0.0232,0,80.281,
		676,0.05980685,0.02180077,0,79.8816,
		677,0.05628216,0.02050112,0,79.4823,
		678,0.05297104,0.01928108,0,79.0829,
		679,0.04981861,0.01812069,0,78.6836,
		680,0.04677,0.017,0,78.2842,
		681,0.04378405,0.01590379,0,77.4279,
		682,0.04087536,0.01483718,0,76.5716,
		683,0.03807264,0.01381068,0,75.7153,
		684,0.03540461,0.01283478,0,74.859,
		685,0.0329,0.01192,0,74.0027,
		686,0.03056419,0.01106831,0,73.1465,
		687,0.02838056,0.01027339,0,72.2902,
		688,0.02634484,0.009533311,0,71.4339,
		689,0.02445275,0.008846157,0,70.5776,
		690,0.0227,0.00821,0,69.7213,
		691,0.02108429,0.007623781,0,69.9101,
		692,0.01959988,0.007085424,0,70.0989,
		693,0.01823732,0.006591476,0,70.2876,
		694,0.01698717,0.006138485,0,70.4764,
		695,0.01584,0.005723,0,70.6652,
		696,0.01479064,0.005343059,0,70.854,
		697,0.01383132,0.004995796,0,71.0428,
		698,0.01294868,0.004676404,0,71.2315,
		699,0.0121292,0.004380075,0,71.4203,
		700,0.01135916,0.004102,0,71.6091,
		*/
		400,0.01431,0.000396,0.06785,82.7549,
		405,0.02319,0.00064,0.1102,87.1204,
		410,0.04351,0.00121,0.2074,91.486,
		415,0.07763,0.00218,0.3713,92.4589,
		420,0.13438,0.004,0.6456,93.4318,
		425,0.21477,0.0073,1.03905,90.057,
		430,0.2839,0.0116,1.3856,86.6823,
		435,0.3285,0.01684,1.62296,95.7736,
		440,0.34828,0.023,1.74706,104.865,
		445,0.34806,0.0298,1.7826,110.936,
		450,0.3362,0.038,1.77211,117.008,
		455,0.3187,0.048,1.7441,117.41,
		460,0.2908,0.06,1.6692,117.812,
		465,0.2511,0.0739,1.5281,116.336,
		470,0.19536,0.09098,1.28764,114.861,
		475,0.1421,0.1126,1.0419,115.392,
		480,0.09564,0.13902,0.81295,115.923,
		485,0.05795,0.1693,0.6162,112.367,
		490,0.03201,0.20802,0.46518,108.811,
		495,0.0147,0.2586,0.3533,109.082,
		500,0.0049,0.323,0.272,109.354,
		505,0.0024,0.4073,0.2123,108.578,
		510,0.0093,0.503,0.1582,107.802,
		515,0.0291,0.6082,0.1117,106.296,
		520,0.06327,0.71,0.07825,104.79,
		525,0.1096,0.7932,0.05725,106.239,
		530,0.1655,0.862,0.04216,107.689,
		535,0.22575,0.91485,0.02984,106.047,
		540,0.2904,0.954,0.0203,104.405,
		545,0.3597,0.9803,0.0134,104.225,
		550,0.43345,0.99495,0.00875,104.046,
		555,0.51205,1,0.00575,102.023,
		560,0.5945,0.995,0.0039,100,
		565,0.6784,0.9786,0.00275,98.1671,
		570,0.7621,0.952,0.0021,96.3342,
		575,0.8425,0.9154,0.0018,96.0611,
		580,0.9163,0.87,0.00165,95.788,
		585,0.9786,0.8163,0.0014,92.2368,
		590,1.0263,0.757,0.0011,88.6856,
		595,1.0567,0.6949,0.001,89.3459,
		600,1.0622,0.631,0.0008,90.0062,
		605,1.0456,0.5668,0.0006,89.8026,
		610,1.0026,0.503,0.00034,89.5991,
		615,0.9384,0.4412,0.00024,88.6489,
		620,0.85445,0.381,0.00019,87.6987,
		625,0.7514,0.321,0.0001,85.4936,
		630,0.6424,0.265,0.00005,83.2886,
		635,0.5419,0.217,0.00003,83.4939,
		640,0.4479,0.175,0.00002,83.6992,
		645,0.3608,0.1382,0.00001,81.863,
		650,0.2835,0.107,0,80.0268,
		655,0.2187,0.0816,0,80.1207,
		660,0.1649,0.061,0,80.2146,
		665,0.1212,0.04458,0,81.2462,
		670,0.0874,0.032,0,82.2778,
		675,0.0636,0.0232,0,80.281,
		680,0.04677,0.017,0,78.2842,
		685,0.0329,0.01192,0,74.0027,
		690,0.0227,0.00821,0,69.7213,
		695,0.01584,0.005723,0,70.6652,
		700,0.011359,0.004102,0,71.6091,
	};
}
